--1.	Find the average discount and total revenue generated for each subcategory across all stores.
SELECT
	store_id,
	store_name,
	subcategory,
	SUM(net_sale) AS total_revenue,
	AVG(discount_percentage *100) AS avg_discount
FROM
global_sales
GROUP BY 1,2,3
ORDER BY 1,3

--2.	Retrieve the top three products by total sales revenue in each store.
--APPROACH 1 SUBQUERY
WITH product_sale
AS
(SELECT
	product_id,
	product_name,
	store_id,
	store_name,
	SUM(net_sale) AS total_sale_revenue
FROM
	global_sales
GROUP BY 1,2,3,4)
SELECT
	p1.store_name,
	p1.product_name,
	p1.total_sale_revenue
FROM
	product_sale p1
WHERE (SELECT 
			COUNT(*)
		FROM
			product_sale p2
		WHERE 
			p2.store_name=p1.store_name
		AND
			p2.total_sale_revenue >p1.total_sale_revenue)<3

ORDER BY 1,2

--2.	Retrieve the top three products by total sales revenue in each store.
WITH product_sale
AS
(SELECT 
	product_id,
	product_name,
	store_id,
	store_name,
	SUM(net_sale) AS total_sales
FROM
	global_sales
GROUP BY 1,2,3,4)
, product_sale_rank
AS
(SELECT 
	*,
	DENSE_RANK() OVER(PARTITION BY store_id ORDER BY total_sales DESC) AS d_rank
FROM 
	product_sale
)
SELECT
	store_name,
	product_name,
	total_sales
FROM
	product_sale_rank
WHERE
	d_rank<4

--3.	Determine the product with the highest (number of units sold in each category and store).
--store_name, category, product_name, qty_sold
WITH product_sale
AS
(SELECT 
	store_name,
	store_id,
	category,
	product_name,
	product_id,
	SUM(qty) AS qty_sold
FROM
	global_sales
GROUP BY 1,2,3,4,5)
,product_sale_rank
AS
(SELECT 
	*,
	DENSE_RANK() OVER (PARTITION BY category,store_id ORDER BY qty_sold DESC) AS product_rank
FROM
	product_sale)

SELECT
	store_name,
	category,
	product_name,
	qty_sold
FROM
	product_sale_rank 
WHERE 
	product_rank=1

--4.	Find the average sales revenue generated by each product in stores where it sold above the average sales quantity.
WITH product_sale
AS
(SELECT
	product_id,
	product_name,
	store_name,
	store_id,
	SUM(qty) AS total_qty
FROM
	global_sales
GROUP BY 1,2,3,4
HAVING SUM(qty) > (SELECT AVG(qty) FROM global_sales))
SELECT
	ps.store_name,
	ps.product_name,
	AVG(gs.net_sale) as avg_net_sale
FROM
	product_sale AS ps
JOIN
	global_sales AS gs
ON
	gs.product_id = ps.product_id
GROUP BY 1,2


--5.	Identify stores with sales for all products in the "Furniture" category, regardless of stock level.

SELECT
	store_id,
	store_name,
	SUM(net_sale) AS total_sales
FROM
	global_sales
WHERE
	category='Furniture'
GROUP BY 1,2

--6.	Use window functions to identify the latest sale for each product in each store.
SELECT 
	*
FROM
	(SELECT
		store_name,
		product_name,
		order_date,
		DENSE_RANK() OVER(PARTITION BY store_id,product_id ORDER BY order_date DESC) AS latest_sale
	FROM
		global_sales)
AS product_sale
WHERE
	latest_sale=1

--7.	Determine the average reorder level for products across different subcategories.

SELECT
	--i.product_id,
	--p.product_name,
	p.subcategory,
	AVG(reorder_level) AS avg_reorder_level
FROM
	products p
JOIN
	inventory i
ON
	i.product_id = p.product_id
GROUP BY 1--,2,3

--8.	Retrieve stores with a total discount percentage above the average discount for all stores.

WITH store_discount AS (
    SELECT 
        store_id,
        store_name,
        SUM(discount_percentage) AS total_discount_percentage
    FROM 
        global_sales
    GROUP BY 
        store_id, store_name
)
SELECT 
    sd.store_id,
    sd.store_name,
    sd.total_discount_percentage
FROM 
    store_discount sd
WHERE 
    sd.total_discount_percentage > (
        SELECT AVG(discount_percentage) 
        FROM global_sales
    )
ORDER BY 
    sd.total_discount_percentage DESC;

--APPROACH 2
SELECT
	gs1.store_name,
	gs1.store_id,
	SUM(gs1.discount_percentage) as total_discount
FROM 
	global_sales as gs1
GROUP BY 1,2
HAVING SUM(gs1.discount_percentage) > (SELECT AVG(gs2.discount_percentage)
									FROM global_sales as gs2
									WHERE gs2.store_id=gs1.store_id)
ORDER BY 3 DESC

--9.	Use subqueries to find products whose sales exceed the highest sales of any other product in the same category.
--Highest selling product from category

SELECT 
	product_id,
	product_name,
	category,
	MAX(net_sale) AS max_sale_per_product
FROM
	global_sales
GROUP BY 1,2,3

--10.	Retrieve the total revenue generated by each store and classify it as "High Revenue" or "Low Revenue" based on the overall average.
WITH total_sales AS (
    SELECT
        store_id,
        store_name,
        SUM(net_sale) AS total_revenue
    FROM
        global_sales
    GROUP BY
        store_id, store_name
),
avg_sales AS (
    SELECT
        ts.store_id,
        ts.store_name,
        ts.total_revenue,
        CASE
            WHEN ts.total_revenue > (
                SELECT AVG(total_revenue) FROM total_sales
            ) THEN 'High Revenue'
            ELSE 'Low Revenue'
        END AS store_performance
    FROM
        total_sales ts
)
SELECT 
    store_id,
    store_name,
    total_revenue,
    store_performance
FROM 
    avg_sales;

--approach 2

 SELECT
        store_id,
        store_name,
        SUM(net_sale) AS total_revenue,
		CASE
			WHEN SUM(net_sale) > (SELECT SUM(net_sale)/(SELECT COUNT(DISTINCT store_id) from global_sales) FROM global_sales) THEN 'High Revenue'
			ELSE 'Low Revenue'
		END AS store_performance
    FROM
        global_sales
    GROUP BY
        store_id, store_name

		








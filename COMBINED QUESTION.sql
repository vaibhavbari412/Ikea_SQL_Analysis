--1.	For each store, list the top three most frequently sold product categories and the total revenue generated by each.
WITH category_sales
AS
(SELECT
	store_id,
	store_name,
	category,
	COUNT(*) AS sales_count,
	SUM(net_sale) AS total_sale
FROM
	global_sales
GROUP BY 1,2,3
), sales_rank
AS
(SELECT 
	*,
	DENSE_RANK() OVER (PARTITION BY category ORDER BY sales_count DESC, total_sale DESC) AS d_rank
FROM
	category_sales)
SELECT 
	*
FROM
	sales_rank
WHERE
	d_rank <4;

--2.	Find the top five stores by sales quantity for products in the "Kitchen" category, with rankings adjusted based on discount levels.
WITH product_sales
AS
(SELECT
	store_id,
	store_name,
	category,
	AVG(discount_percentage) AS total_discount,
	SUM(qty) AS total_sales_qty
FROM
	global_sales
WHERE
	category='Kitchen'
GROUP BY 1,2,3)
,product_sales_rank
AS
(SELECT
	*,
	DENSE_RANK() OVER(ORDER BY total_sales_qty DESC,total_discount ASC) AS d_rank
FROM
	product_sales)
SELECT 
	*
FROM
	product_sales_rank 
WHERE
	d_rank < 6

--3.	For each product category, identify the top-performing stores based on total sales revenue and assign a performance rank to each.
WITH product_sale
AS
(SELECT
	store_id,
	store_name,
	category,
	SUM(net_sale) AS sales_revenue
FROM
	global_sales
GROUP BY 1,2,3)
,product_rank
AS
(SELECT
	*,
	DENSE_RANK() OVER(PARTITION BY category ORDER BY sales_revenue DESC) AS d_rank
FROM
	product_sale)
SELECT
	*
FROM
product_rank
WHERE
	d_rank =1

--4.	List products with inventory levels below their reorder level and sales quantities above the average for their category.